/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.vitals;

import IOT.Sensor;
import business.organization.OrganizationDirectory;
import business.patient.Patient;
import business.patient.vitalSigns.VitalSigns;
import business.userAccount.UserAccount;
import calculations.Calculate;
import calculations.Validations;
import java.awt.CardLayout;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Map;
import java.util.NavigableMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Prajakta
 */
public class ViewVitalsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private OrganizationDirectory organizationDirectory;
    private UserAccount userAccount;
    private Patient patient;
    private Calculate calculate;
    private Sensor sensor;
    Method method;
    SimpleDateFormat sdf = new SimpleDateFormat();
    /**
     * Creates new form ViewVitalsJPanel
     */
    public ViewVitalsJPanel(JPanel userProcessContainer, OrganizationDirectory organizationDirectory,UserAccount account) {
        initComponents();
        setSize(1370, 725);
        this.userAccount = account;
        this.userProcessContainer = userProcessContainer;
        this.organizationDirectory = organizationDirectory;
        this.patient = (Patient) userAccount.getPerson();
        
        sensor = new Sensor(patient);
        VitalSigns newVitals = patient.getVitalSignHistory().addVitalSign();
//        calculate.calculateVitals(newVitals);
//        try{
//        populateVitalsTable();
//        }
//        catch (Exception e)
//        {
//            e.printStackTrace();
//        }
        
        sensor.recordVitals();
        try{
        populateVitalsTable();
        }

        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

     private void populateVitalsTable() throws Exception{
        Validations validateVitals = new Validations();
        DefaultTableModel model = (DefaultTableModel) tblVitals.getModel();
        Class vitals = patient.getVitalSignHistory().getVitalSignMap().lastEntry().getValue().getClass();
        model.setRowCount(0);
             Object[] row = new Object[4];
             for(Field f : vitals.getDeclaredFields())
             {
             row[0] = f.getName();
             char c = Character.toUpperCase(f.getName().charAt(0));
             method = vitals.getMethod("get"+c+f.getName().substring(1));
             row[1] = method.invoke(patient.getVitalSignHistory().getVitalSignMap().lastEntry().getValue());
             
             calculate = Calculate.getInstance();
             row[2] = validateVitals.vitalStatus(calculate.findAge(patient),patient.getVitalSignHistory().getVitalSignMap().lastEntry().getValue());
             
             Date getDateTime = patient.getVitalSignHistory().getVitalSignMap().lastEntry().getKey();
             String dateTime = sdf.format(getDateTime);
             row[3] = dateTime;
             model.addRow(row); 
             }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblVitals = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        dateChooser = new com.toedter.calendar.JDateChooser();
        btnSearch = new javax.swing.JButton();
        btnStatistics = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();

        tblVitals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Weight", null, null, null},
                {"Blood sugar", null, null, null},
                {"Heart Rate", null, null, null},
                {"Vision", null, null, null},
                {"eGFR", null, null, null},
                {"Albumin", null, null, null},
                {"Cholesterol", null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Vital Sign", "Value", "Status", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblVitals);
        if (tblVitals.getColumnModel().getColumnCount() > 0) {
            tblVitals.getColumnModel().getColumn(0).setResizable(false);
            tblVitals.getColumnModel().getColumn(1).setResizable(false);
            tblVitals.getColumnModel().getColumn(2).setResizable(false);
            tblVitals.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel1.setText("Your Vitals Recorded !");

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSearch.setText("Search by Date");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnStatistics.setText("Statistics");
        btnStatistics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStatisticsActionPerformed(evt);
            }
        });

        jLabel3.setText("Welcome");

        jLabel4.setText("Vital Sign History");

        jLabel2.setText("<value>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnStatistics)
                        .addGap(84, 84, 84))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSearch)
                        .addGap(74, 74, 74)
                        .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(248, 248, 248)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(75, 75, 75)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(jSeparator1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearch)
                    .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnStatistics))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        Validations validateVitals = new Validations();
         Sensor sensor = new Sensor(patient);
        DefaultTableModel model = (DefaultTableModel) tblVitals.getModel();
        Class vitals = patient.getVitalSignHistory().getVitalSignMap().lastEntry().getValue().getClass();
         if(dateChooser.getDate() == null){
             JOptionPane.showMessageDialog(null,"Enter correct Date","",JOptionPane.WARNING_MESSAGE);
             return;
         }
        model.setRowCount(0);
        Calendar fromDate = Calendar.getInstance();
        Calendar toDate = Calendar.getInstance();
        fromDate.setTime(dateChooser.getDate());
        fromDate.roll(Calendar.DATE, false);
        toDate.setTime(dateChooser.getDate());
        toDate.roll(Calendar.DATE,true);
        
        NavigableMap<Date,VitalSigns> sm = patient.getVitalSignHistory().getVitalSignMap().subMap(fromDate.getTime(),false,toDate.getTime(),false);
        for(Map.Entry<Date,VitalSigns> entry : sm.entrySet()) {
               
                 Object[] row = new Object[4];
             for(Field f : vitals.getDeclaredFields())
             {
            try {
                row[0] = f.getName();
                char c = Character.toUpperCase(f.getName().charAt(0));
                method = vitals.getMethod("get"+c+f.getName().substring(1));
                Date selectDate = dateChooser.getDate();
                String selectedDate = sdf.format(selectDate);
        
                row[1] = method.invoke(entry.getValue());
                calculate = Calculate.getInstance();
                row[2] = validateVitals.vitalStatus(calculate.findAge(patient), entry.getValue());
                row[3] = entry.getKey(); 
                model.addRow(row);
            } catch (IllegalAccessException ex) {
                    Logger.getLogger(ViewVitalsJPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvocationTargetException ex) {
                    Logger.getLogger(ViewVitalsJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            catch (NoSuchMethodException ex) {
                Logger.getLogger(ViewVitalsJPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SecurityException ex) {
                Logger.getLogger(ViewVitalsJPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalArgumentException ex) {
                Logger.getLogger(ViewVitalsJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }  
            }
             }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnStatisticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStatisticsActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblVitals.getModel();
        
        //for(int i=0 ;i<=model.getRowCount();i++){
        DefaultPieDataset dataset = new DefaultPieDataset();
        
        dataset.setValue("Fasting Blood Sugar",new Integer(String.valueOf(model.getValueAt(0, 1))));
        dataset.setValue("After Meal Blood Sugar",new Integer(String.valueOf(model.getValueAt(1, 1))));
        dataset.setValue("Vision Range",Float.parseFloat((model.getValueAt(2, 1).toString())));
        dataset.setValue("Cholesterol",new Integer(String.valueOf(model.getValueAt(3, 1))));
        dataset.setValue("Respiratory Rate",new Integer(String.valueOf(model.getValueAt(4, 1))));
        
        dataset.setValue("Heart Rate",new Integer(String.valueOf(model.getValueAt(5, 1))));
        dataset.setValue("Blood Pressure",new Integer(String.valueOf(model.getValueAt(6, 1))));
        dataset.setValue("Weight",new Integer(String.valueOf(model.getValueAt(7, 1))));
        dataset.setValue("eGFR",new Integer(String.valueOf(model.getValueAt(8, 1))));
        dataset.setValue("Albumin",new Integer(String.valueOf(model.getValueAt(9, 1))));

        JFreeChart chart = ChartFactory.createPieChart("Vital Sign Statistics",dataset, true, true, true);
            PiePlot p =(PiePlot) chart.getPlot();
            //p.setForegroundAlpha(TOP_ALIGNMENT);
            ChartFrame frame = new ChartFrame("Pie Chart",chart);
            frame.setVisible(true);
            frame.setSize(450, 350);
        //}
    }//GEN-LAST:event_btnStatisticsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnStatistics;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tblVitals;
    // End of variables declaration//GEN-END:variables
}
